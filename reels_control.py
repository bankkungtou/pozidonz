"""
‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏õ Instagram Reels
"""
import requests
import json
import os
import time
from setting import SAFE_HASHTAGS, DISCLAIMER_TEXT

class ReelsController:
    def __init__(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Instagram Basic Display API"""
        self.access_token = os.getenv('INSTAGRAM_ACCESS_TOKEN', 'your_instagram_access_token')
        self.user_id = os.getenv('INSTAGRAM_USER_ID', 'your_instagram_user_id')
        self.base_url = "https://graph.instagram.com"
        
    def create_post_caption(self, story_data):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå Instagram Reels"""
        caption = f"{story_data['title']}\n\n"
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏±‡πâ‡∏ô‡πÜ
        if len(story_data.get('story', '')) > 100:
            caption += f"{story_data['story'][:100]}...\n\n"
        else:
            caption += f"{story_data['story']}\n\n"
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        if story_data.get('location'):
            caption += f"üìç {story_data['location']}\n"
        if story_data.get('time_period'):
            caption += f"‚è∞ {story_data['time_period']}\n"
        if story_data.get('moral'):
            caption += f"üí° {story_data['moral']}\n\n"
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° disclaimer
        caption += DISCLAIMER_TEXT + "\n"
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏Æ‡∏ä‡πÅ‡∏ó‡πá‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Instagram
        instagram_hashtags = [
            '#reels', '#thailand', '#thaiculture', '#storytelling',
            '#folklore', '#history', '#culture', '#education'
        ] + SAFE_HASHTAGS
        
        hashtags = " ".join(instagram_hashtags[:30])  # Instagram ‡∏à‡∏≥‡∏Å‡∏±‡∏î 30 ‡πÅ‡∏Æ‡∏ä‡πÅ‡∏ó‡πá‡∏Å
        caption += f"\n{hashtags}"
        
        return caption
    
    def upload_video_to_reels(self, video_path, story_data):
        """‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏õ Instagram Reels"""
        try:
            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á media container
            container_id = self.create_media_container(video_path, story_data)
            if not container_id:
                return False
            
            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏£‡∏≠‡πÉ‡∏´‡πâ video ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à
            if not self.wait_for_processing(container_id):
                return False
            
            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà Reel
            media_id = self.publish_reel(container_id)
            
            if media_id:
                print(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Instagram Reels ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {media_id}")
                return True
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà Reel ‡πÑ‡∏î‡πâ")
                return False
                
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Reels: {e}")
            return False
    
    def create_media_container(self, video_path, story_data):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á media container ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Reels"""
        try:
            url = f"{self.base_url}/v17.0/{self.user_id}/media"
            
            caption = self.create_post_caption(story_data)
            
            # ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á server ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏Å‡πà‡∏≠‡∏ô (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ public URL)
            video_url = self.upload_to_temp_server(video_path)
            if not video_url:
                return None
            
            params = {
                'media_type': 'REELS',
                'video_url': video_url,
                'caption': caption,
                'access_token': self.access_token
            }
            
            response = requests.post(url, params=params)
            
            if response.status_code == 200:
                result = response.json()
                return result.get('id')
            else:
                print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á media container ‡πÑ‡∏î‡πâ: {response.status_code}")
                print(f"Response: {response.text}")
                return None
                
        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á container: {e}")
            return None
    
    def upload_to_temp_server(self, video_path):
        """‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á server ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß (‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ service ‡πÄ‡∏ä‡πà‡∏ô AWS S3, Cloudinary)"""
        # ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á cloud storage
        # ‡πÅ‡∏•‡∏∞ return public URL
        
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Cloudinary (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á cloudinary package)
        try:
            import cloudinary
            import cloudinary.uploader
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Cloudinary
            cloudinary.config(
                cloud_name=os.getenv('CLOUDINARY_CLOUD_NAME'),
                api_key=os.getenv('CLOUDINARY_API_KEY'),
                api_secret=os.getenv('CLOUDINARY_API_SECRET')
            )
            
            # ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
            result = cloudinary.uploader.upload(
                video_path,
                resource_type="video",
                folder="ghost_stories"
            )
            
            return result.get('secure_url')
            
        except ImportError:
            print("‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á cloudinary package ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ cloud storage ‡∏≠‡∏∑‡πà‡∏ô")
            return None
        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: {e}")
            return None
    
    def wait_for_processing(self, container_id, max_wait=300):
        """‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à"""
        try:
            url = f"{self.base_url}/v17.0/{container_id}"
            params = {
                'fields': 'status_code',
                'access_token': self.access_token
            }
            
            start_time = time.time()
            while time.time() - start_time < max_wait:
                response = requests.get(url, params=params)
                
                if response.status_code == 200:
                    result = response.json()
                    status = result.get('status_code')
                    
                    if status == 'FINISHED':
                        print("‚úÖ ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
                        return True
                    elif status == 'ERROR':
                        print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠")
                        return False
                    else:
                        print(f"‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•... ({status})")
                        time.sleep(10)
                else:
                    print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ: {response.status_code}")
                    return False
            
            print("‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
            return False
            
        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {e}")
            return False
    
    def publish_reel(self, container_id):
        """‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà Reel"""
        try:
            url = f"{self.base_url}/v17.0/{self.user_id}/media_publish"
            
            params = {
                'creation_id': container_id,
                'access_token': self.access_token
            }
            
            response = requests.post(url, params=params)
            
            if response.status_code == 200:
                result = response.json()
                return result.get('id')
            else:
                print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà Reel ‡πÑ‡∏î‡πâ: {response.status_code}")
                print(f"Response: {response.text}")
                return None
                
        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà: {e}")
            return None
    
    def test_connection(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Instagram API"""
        try:
            url = f"{self.base_url}/v17.0/{self.user_id}"
            params = {
                'fields': 'id,username',
                'access_token': self.access_token
            }
            
            response = requests.get(url, params=params)
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Instagram API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: @{result.get('username')}")
                return True
            else:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Instagram API ‡πÑ‡∏î‡πâ: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {e}")
            return False

if __name__ == "__main__":
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    reels = ReelsController()
    
    if reels.test_connection():
        print("Instagram Reels API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    else:
        print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Instagram API")